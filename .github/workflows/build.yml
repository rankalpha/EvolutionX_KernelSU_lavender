name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
     repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
     - name: "😄 Checkout"
       uses: actions/checkout@v4
    
     - name: "😆 Generate Matrix"
       id: generate-matrix
       run: |
         echo "repos<<EOF" >> $GITHUB_OUTPUT
         cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
         echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}

      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME_ORG: ${{ matrix.repos.kernelSource.device }}_defconfig
      DEFCONFIG_NAME_0: lavender-perf_defconfig
      DEFCONFIG_NAME_1: sdm660_defconfig
      DEFCONFIG_NAME_2: sdm660-perf_defconfig
      DEFCONFIG_NAME_LAVENDER: vendor/sdm660_defconfig
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}

      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "✨ Create working dir"
        run: mkdir -p $kernelDir

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools

      - name: "🌟 Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "💫 Get toolchains"
        working-directory: ./${{ env.kernelDir }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo $toolchains_num
          for ((i=0;i<toolchains_num;i++)); do
            df -h
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            if [ "$branch" == "" ]; then
              FILE_NAME=$(basename "$repo")
              wget -O "$FILENAME" "$repo"
              mkdir "$(pwd)/$name/"
              case "${FILE_NAME}" in
                *.tar.xz|*.tar.gz|*.tgz)
                  echo "Extracting .tar.xz/.tar.gz file"
                  tar -xf "$FILE_NAME" -C "$(pwd)/$name/" --strip-components=1
                  ;;
                *.zip)
                  echo "Extracting .zip file"
                  unzip "$FILE_NAME" -d "$(pwd)/$name/"
                  ;;
                *)
                  echo "Unsupported file format: $FILE_NAME"
                  exit 1
                  ;;
              esac
              ls -ls
            else
              git clone --recursive --branch $branch $repo $name --depth=1
            fi
            echo "$(pwd)/$name/" >> $GITHUB_PATH
            echo "$(pwd)/$name/bin" >> $GITHUB_PATH
          done

          echo "PATH Variable: $PATH"

      - name: "😎 Set args"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_COMPAT=$(echo $params | jq -r ".CROSS_COMPILE_COMPAT")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          AR=$(echo $params | jq -r ".AR")
          CC=$(echo $params | jq -r ".CC")

          echo "ARCH=$ARCH" >> $GITHUB_ENV

          args="-j$(nproc --all)"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p $(pwd)/${{ env.OUT_DIR }}
            args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CROSS_COMPILE" ]; then
            args="$args CROSS_COMPILE=$CROSS_COMPILE"
          fi
          if [ -n "$CLANG_TRIPLE" ]; then
            args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          fi
          if [ -n "$CROSS_COMPILE_COMPAT" ]; then
            args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_COMPAT"
          fi
          if [ -n "$AR" ]; then
            args="$args AR=$AR"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=$CC"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "😋 Update KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          #curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/v0.9.0/kernel/setup.sh" | bash -

          #cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

          # 下载特定版本的KernelSU
          curl -LSs "https://github.com/tiann/KernelSU/archive/refs/tags/v0.9.0.tar.gz" -o KernelSU-v0.9.0.tar.gz

          # 解压下载的压缩包
          tar -xzf KernelSU-v0.9.0.tar.gz

          # 移动到指定目录
          mv "KernelSU-0.9.0" "./KernelSU"

          # 赋予权限并运行setup.sh
          chmod +x "./KernelSU/kernel/setup.sh"
          ./"KernelSU/kernel/setup.sh"          
    
      - name: "👍 Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}
          #echo "--- $(pwd)/${{ env.OUT_DIR }} ---"
          #echo "--- /home/runner/work/EvolutionX_KernelSU_lavender/EvolutionX_KernelSU_lavender/Kernel_lavender/out ---"
          #echo "--- ${{ env.kernelDir }}/${{ env.kernelName }} --"
          
          #echo "----------------- 1 -----------------"
          #ls -la /home/runner/work/EvolutionX_KernelSU_lavender/EvolutionX_KernelSU_lavender/Kernel_lavender/out
          #echo "----------------- 2 -----------------"
          #ls -la /home/runner/work/EvolutionX_KernelSU_lavender/EvolutionX_KernelSU_lavender/Kernel_lavender
          #echo "----------------- 3 -----------------"          
          #mkdir -p ../${{ env.OUT_DIR }}
          #ls -la ../${{ env.OUT_DIR }}
          #echo "----------------- 4 -----------------"          
          #cp arch/arm64/configs/vendor/redmi_note7_config /home/runner/work/EvolutionX_KernelSU_lavender/EvolutionX_KernelSU_lavender/Kernel_lavender/out/.config
          #ls -la ../${{ env.OUT_DIR }}
          #echo "----------------- KPROBE -----------------"
          #cat arch/arm64/configs/vendor/redmi_note7_config | grep KPROBE
          #echo "----------------- FTRACE -----------------"
          #cat arch/arm64/configs/vendor/redmi_note7_config | grep FTRACE
          #echo "----------------- BPF -----------------"
          #cat arch/arm64/configs/vendor/redmi_note7_config | grep BPF

      - name: "🎶 Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${args}

      - name: "💛 Upload Image"
        uses: actions/upload-artifact@v4
        with:
          name: Image(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "💙 Upload Image.gz"
        uses: actions/upload-artifact@v4
        with:
          name: Image.gz(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "💜 Upload dtb"
        uses: actions/upload-artifact@v4
        with:
          name: dtb(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "❤️ Upload dtbo.img"
        uses: actions/upload-artifact@v4
        with:
          name: dtbo.img(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7
